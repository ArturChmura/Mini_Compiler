// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-UEML2C3
// DateTime: 25.05.2021 00:04:56
// UserName: Artur
// Input file <.\kompilator.y - 25.05.2021 00:04:23>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace Mini_Compiler
{
public enum Tokens {error=2,EOF=3,Program=4,If=5,Else=6,
    While=7,String=8,RealType=9,IntType=10,Read=11,Write=12,
    Return=13,BoolType=14,True=15,False=16,Hex=17,Assign=18,
    Or=19,And=20,BitOR=21,BitAnd=22,Equality=23,Unequality=24,
    Greater=25,GreaterOrEqual=26,Less=27,LessOrEqual=28,Plus=29,Minus=30,
    Multiplies=31,Divides=32,Exclamation=33,Tilde=34,OpenParenthesis=35,CloseParenthesis=36,
    OpenBracket=37,CloseBracket=38,Comma=39,Semicolon=40,Error=41,RealNumber=42,
    IntNumber=43,Identifier=44};

public struct ValueType
#line 19 ".\kompilator.y"
{
    public string str;
    public INode node;
    public List<INode> nodes;
    public List<string> strings;
    public List<DeclarationNode> declarations;
    public DeclarationNode declaration;
    public IType type;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from .\kompilator.y - 25.05.2021 00:04:23
#line 7 ".\kompilator.y"
    private Corrector corrector;
    public int ErrorsCount { get => corrector.ErrorsCount; }

    public Parser(Scanner scanner) : base(scanner) { 
        this.corrector = new Corrector(scanner);
    }

    public INode RootNode { get; private set; }
    
#line default
  // End verbatim content from .\kompilator.y - 25.05.2021 00:04:23

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[13];
  private static State[] states = new State[18];
  private static string[] nonTerms = new string[] {
      "block", "declarations", "declaration", "identifiers", "identifiersComma", 
      "type", "start", "$accept", };

  static Parser() {
    states[0] = new State(new int[]{4,3},new int[]{-7,1});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{37,5},new int[]{-1,4});
    states[4] = new State(-2);
    states[5] = new State(-5,new int[]{-2,6});
    states[6] = new State(new int[]{38,7,10,15,9,16,14,17},new int[]{-3,8,-6,9});
    states[7] = new State(-3);
    states[8] = new State(-4);
    states[9] = new State(-9,new int[]{-4,10,-5,12});
    states[10] = new State(new int[]{40,11});
    states[11] = new State(-6);
    states[12] = new State(new int[]{44,13});
    states[13] = new State(new int[]{39,14,40,-7});
    states[14] = new State(-8);
    states[15] = new State(-10);
    states[16] = new State(-11);
    states[17] = new State(-12);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-8, new int[]{-7,3});
    rules[2] = new Rule(-7, new int[]{4,-1});
    rules[3] = new Rule(-1, new int[]{37,-2,38});
    rules[4] = new Rule(-2, new int[]{-2,-3});
    rules[5] = new Rule(-2, new int[]{});
    rules[6] = new Rule(-3, new int[]{-6,-4,40});
    rules[7] = new Rule(-4, new int[]{-5,44});
    rules[8] = new Rule(-5, new int[]{-5,44,39});
    rules[9] = new Rule(-5, new int[]{});
    rules[10] = new Rule(-6, new int[]{10});
    rules[11] = new Rule(-6, new int[]{9});
    rules[12] = new Rule(-6, new int[]{14});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // start -> Program, block
#line 43 ".\kompilator.y"
                                { RootNode  = ValueStack[ValueStack.Depth-1].node; }
#line default
        break;
      case 3: // block -> OpenBracket, declarations, CloseBracket
#line 45 ".\kompilator.y"
                                                          { CurrentSemanticValue.node  = new RootNode(ValueStack[ValueStack.Depth-2].declarations); }
#line default
        break;
      case 4: // declarations -> declarations, declaration
#line 47 ".\kompilator.y"
                                           { CurrentSemanticValue.declarations = ValueStack[ValueStack.Depth-2].declarations; CurrentSemanticValue.declarations.Add(ValueStack[ValueStack.Depth-1].declaration); }
#line default
        break;
      case 5: // declarations -> /* empty */
#line 48 ".\kompilator.y"
                  { CurrentSemanticValue.declarations = new List<DeclarationNode>(); }
#line default
        break;
      case 6: // declaration -> type, identifiers, Semicolon
#line 51 ".\kompilator.y"
                { 
                    CurrentSemanticValue.declaration = new DeclarationNode(ValueStack[ValueStack.Depth-3].type,ValueStack[ValueStack.Depth-2].strings); 
                    corrector.MakeDeclaration(ValueStack[ValueStack.Depth-2].strings);
                }
#line default
        break;
      case 7: // identifiers -> identifiersComma, Identifier
#line 56 ".\kompilator.y"
                                              { CurrentSemanticValue.strings = ValueStack[ValueStack.Depth-2].strings; CurrentSemanticValue.strings.Add(ValueStack[ValueStack.Depth-1].str); }
#line default
        break;
      case 8: // identifiersComma -> identifiersComma, Identifier, Comma
#line 58 ".\kompilator.y"
                                                     { CurrentSemanticValue.strings = ValueStack[ValueStack.Depth-3].strings; CurrentSemanticValue.strings.Add(ValueStack[ValueStack.Depth-2].str); }
#line default
        break;
      case 9: // identifiersComma -> /* empty */
#line 59 ".\kompilator.y"
                  { CurrentSemanticValue.strings = new List<string>(); }
#line default
        break;
      case 10: // type -> IntType
#line 61 ".\kompilator.y"
                          { CurrentSemanticValue.type = new IntType(); }
#line default
        break;
      case 11: // type -> RealType
#line 62 ".\kompilator.y"
                           { CurrentSemanticValue.type = new RealType(); }
#line default
        break;
      case 12: // type -> BoolType
#line 63 ".\kompilator.y"
                           { CurrentSemanticValue.type = new BoolType(); }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
