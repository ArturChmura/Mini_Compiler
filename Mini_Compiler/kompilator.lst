
// ==========================================================================
//  GPPG error listing for yacc source file <.\kompilator.y - 25.05.2021 19:59:32>
// ==========================================================================
//  Version:  1.5.2
//  Machine:  DESKTOP-UEML2C3
//  DateTime: 25.05.2021 19:59:39
//  UserName: Artur
// ==========================================================================


%namespace Mini_Compiler

%output=Parser.cs


%{
    private ParserCS parser;
    public int ErrorsCount { get => parser.ErrorsCount; }

    public Parser(Scanner scanner) : base(scanner) { 
        this.parser = new ParserCS(scanner);
    }

    public INode RootNode { get; private set; }
    
%}

%union
{
    public INode node;
    public string str;
    public int intType;
    public double doubleType;
    public bool boolType;
    public List<INode> nodes;
    public List<string> strings;
    public List<DeclarationNode> declarations;
    public List<InstructionNode> instructions;
    public DeclarationNode declaration;
    public InstructionNode instruction;
    public IExpression expression;
    public IType type;
    public IdentifierExpression identifier;
}

%token  Program If Else While String RealType IntType Read Write Return BoolType True False Hex 
%token  Assign Or And BitOR BitAnd Equality Unequality Greater GreaterOrEqual Less LessOrEqual
%token  Plus Minus Multiplies Divides Exclamation Tilde OpenParenthesis 
%token CloseParenthesis OpenBracket CloseBracket Comma Semicolon
%token   Error RealNumber IntNumber 

%token <str> Identifier IntNumber RealNumber True False

%type <declarations> declarations
%type <declaration> declaration 
%type <strings> identifiers identifiersComma
%type <type> type 
%type <instructions> instructions
%type <instruction> instruction block expressionInstruction
%type <expression> expression constantExpression assignExpression
%type <identifier> identifier 

%%

start           : Program block { RootNode  = $2; }
                ;

block           : OpenBracket declarations instructions CloseBracket   { $$  = new BlockInstructionNode($2, $3); }
                ;

declarations    : declarations declaration { $$ = $1; $$.Add($2); }
                | { $$ = new List<DeclarationNode>(); }
                ;

declaration     : type identifiers Semicolon 
                { 
                    $$ = new DeclarationNode($1,$2); 
                    parser.MakeDeclaration($1,$2);
                }
                ;

identifiers     : identifiersComma Identifier { $$ = $1; $$.Add($2); }
                ;

identifiersComma: identifiersComma Identifier Comma  { $$ = $1; $$.Add($2); }
                | { $$ = new List<string>(); }
                ;

type            : IntType { $$ = new IntType(); }
                | RealType { $$ = new DoubleType(); }
                | BoolType { $$ = new BoolType(); }
                ;

instructions    : instructions instruction { $$ = $1; $$.Add($2); }
                | { $$ = new List<InstructionNode>(); }
                ;

instruction     : block { $$ = $1; }
                | expressionInstruction { $$ = $1; }
                ;

expressionInstruction      : expression Semicolon { $$ = new ExpressionInstructionNode($1); }
                ;

expression      : constantExpression { $$ = $1; }
                | assignExpression { $$ = $1; }
                ;

constantExpression  : IntNumber { $$ = new IntConstantExpression($1); }
                    | RealNumber { $$ = new DoubleConstantExpression($1); }
                    | True { $$ = new BoolConstantExpression(true); }
                    | False { $$ = new BoolConstantExpression(false); }
                    ;
assignExpression : identifier Assign expression { $$ = new AssignExpression($1,$3); }
                 ;

identifier : Identifier { $$ = parser.GetIdentifier($1); }//------------------------------------------------------^
// Error: Syntax error, unexpected EOF
// -----------------------------------
// ==========================================================================

